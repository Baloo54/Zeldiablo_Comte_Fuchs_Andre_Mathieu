@startuml diagrammeLaby
title Chargement du diagramme

'''classes
class Labyrinthe
{
  +pj : Perso
  +murs : Boolean

  +{static} get suivant(x: int, y: int, action: String) : int[]
  +Labyrinthe(nom : String)
  +deplacerPerso(action : String)
  +etreFini() : Boolean
  +descriptionLaby() : String
  +getlengthY() : int
  +getLength() : int
  +getMur(x: int, y: int)
}

class LabyJeu
{
  -labyrinthe : Labyrinthe

  +choixNiveau(niveau : int) : void
  +getLabyrinthe() : Labyrinthe
  +LabyJeu()
  +update(secondes double), clavier Clavier)
  +init()
  +etreFini() : Boolean
}

interface Jeu
{
  +update(secondes : double, clavier : Clavier)
  +init()
  +etreFini() : Boolean
}

'''relations
Jeu <|.. LabyJeu
LabyJeu "1" --> "*" Labyrinthe : -labyrinthes

@enduml

@startuml  sequenceLaby

participant "m:main" as main
participant "labyrinthe:Labyrinthe" as labyrinthe
participant "file : File" as File

activate main
main -> labyrinthe : new Labyrinthe()
activate labyrinthe
labyrinthe -> File : new File(cheminFichier)
activate File
File --> labyrinthe : FileNotFoundException
labyrinthe -> File : new File(cheminFichierParDefaut)
File --> labyrinthe
deactivate File
main -> labyrinthe : descriptionLaby()
labyrinthe --> main : description
deactivate labyrinthe
deactivate main
@enduml

@startuml diagrameEntite
title gestion des personnages
Interface Entite {
    +attaquer(Entite e)
    +SubirDegats(int i)
    +getNom() : string
    +getPv() : int
    +getForce() : int
    +getArme() : Arme
    +PrendreArme(arme : Arme)
    +etrePresent(int dx, int dy) : boolean
}

class Perso {
    - nom : string
    - pv : int
    - force : int
    - arme : Arme
    - x : int
    - y : int

    +attaquer(Entite e)
    +SubirDegats(int i)
    +getNom() : string
    +getPv() : int
    +getForce() : int
    +getArme() : Arme
    +PrendreArme(arme : Arme)
    +etrePresent(int dx, int dy) : boolean

}

abstract class Monstre {
    - nom : string
    - pv : int
    - force : int
    - arme : Arme
    - x : int
    - y : int

    +attaquer(Entite e)
    +SubirDegats(int i)
    +getNom() : string
    +getPv() : int
    +getForce() : int
    +getArme() : Arme
    +PrendreArme(arme : Arme)
    +etrePresent(int dx, int dy) : boolean
}

class Fantome {
    - nom : string
    - pv : int
    - force : int
    - arme : Arme
    - x : int
    - y : int

    +attaquer(Entite e)
    +SubirDegats(int i)
    +getNom() : string
    +getPv() : int
    +getForce() : int
    +getArme() : Arme
    +PrendreArme(arme : Arme)
    +etrePresent(int dx, int dy) : boolean
}


class Arme {
    - nom : string
    - degats : int

    +Arme(nom : string, degats : int)
    +getNom() : string
    +getDegats() : int
}

Entite <|-- Perso
Entite <|-- Monstre
Monstre <|-- Fantome
Entite "1" <-- "0..1" Arme : possede

@enduml

@startuml  sequenceEntite

participant "m:main" as main
participant "labyrinthe:Labyrinthe" as labyrinthe
participant "monstre : Monstre" as Monstre
participant "pj : Perso" as pj

activate main
main -> labyrinthe : new Labyrinthe(nomFichier)
activate labyrinthe



create Monstre
labyrinthe --> Monstre : new Monstre()
labyrinthe -> pj : SeDeplacer()
pj -> Monstre : getPos()
Monstre --> pj : int[5][5] position
pj -> pj : getPos()
pj --> pj : int[5][5] position
pj --> labyrinthe : void


labyrinthe --> main
deactivate labyrinthe
deactivate main
@enduml

@startuml  sequenceLabyJeu
title Diagramme de sÃ©quence du jeu
participant "m:main" as main
participant "labyrinthe:Labyrinthe" as labyrinthe
participant "file : File" as File

activate main
main -> labyrinthe : new Labyrinthe()
activate labyrinthe
labyrinthe -> File : new File(cheminFichierParDefaut)
activate File
File --> labyrinthe : FileNotFoundException
File --> labyrinthe
deactivate File
main -> labyrinthe : choixNiveau(niveau)
labyrinthe -> File : new File(cheminFichier)
activate File
File --> labyrinthe : FileNotFoundException
File --> labyrinthe
labyrinthe -> main 
deactivate File
deactivate labyrinthe
deactivate main

@enduml